import collections
class Solution(object):
    def subsetsWithDup(self, nums):
        res = [[]]
        for num, freq in collections.Counter(nums).items():
            res_len = len(res)
            for i in range(1, freq+1):
                for r in res[:res_len]:
                    res.append(r+[num]*i)
        return res
import collections
class Solution(object):
    def subsetsWithDup(self, nums):
        res = [[]]
        for num, freq in collections.Counter(nums).items():
            res_len = len(res)
            for i in range(1, freq+1):
                for r in res[:res_len]:
                    res.append(r+[num]*i)
        return res
import collections
class Solution(object):
    def subsetsWithDup(self, nums):
        res = [[]]
        for num, freq in collections.Counter(nums).items():
            res_len = len(res)
            for i in range(1, freq+1):
                for r in res[:res_len]:
                    res.append(r+[num]*i)
        return res
  def prime(num):
    count = 2
    while count<=num:
        if num%count == 0:
            break
        count+=1

    if count == num:
        print("Prime Number")
    else:
        print("Not Prime Number")
